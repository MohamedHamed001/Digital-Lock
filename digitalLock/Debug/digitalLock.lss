
digitalLock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000003ec  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080011a  0080011a  0000049a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de7  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d9  00000000  00000000  0000134b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052c  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00002050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000601  00000000  00000000  0000251f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002b20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  9e:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcdCommand>:
	lcdCommand(0x01); // Clear display
	_delay_ms(2);
}

void lcdCommand(uint8_t cmd) {
	PORTB = (cmd & 0xF0) | (1 << LCD_E);
  a6:	98 2f       	mov	r25, r24
  a8:	90 7f       	andi	r25, 0xF0	; 240
  aa:	92 60       	ori	r25, 0x02	; 2
  ac:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~(1 << LCD_RS);
  ae:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1 << LCD_E);
  b0:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	e3 ef       	ldi	r30, 0xF3	; 243
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcdCommand+0x10>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <lcdCommand+0x16>
  bc:	00 00       	nop
	_delay_ms(2);
	
	PORTB = ((cmd << 4) & 0xF0) | (1 << LCD_E);
  be:	f0 e1       	ldi	r31, 0x10	; 16
  c0:	8f 9f       	mul	r24, r31
  c2:	c0 01       	movw	r24, r0
  c4:	11 24       	eor	r1, r1
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << LCD_RS);
  ca:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1 << LCD_E);
  cc:	29 98       	cbi	0x05, 1	; 5
  ce:	83 ef       	ldi	r24, 0xF3	; 243
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcdCommand+0x2c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcdCommand+0x32>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <initLCD>:
  dc:	87 e8       	ldi	r24, 0x87	; 135
  de:	93 e1       	ldi	r25, 0x13	; 19
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <initLCD+0x4>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <initLCD+0xa>
  e6:	00 00       	nop
}

void initLCD() {
	// Set LCD to 4-bit mode
	_delay_ms(20);
	lcdCommand(0x02); // Initialize in 4-bit mode
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
	lcdCommand(0x28); // 2 lines, 5x7 matrix
  ee:	88 e2       	ldi	r24, 0x28	; 40
  f0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
	lcdCommand(0x0C); // Display on, cursor off
  f4:	8c e0       	ldi	r24, 0x0C	; 12
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
	lcdCommand(0x06); // Increment cursor
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
	lcdCommand(0x01); // Clear display
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
 106:	83 ef       	ldi	r24, 0xF3	; 243
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <initLCD+0x2e>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <initLCD+0x34>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <lcdData>:
	PORTB &= ~(1 << LCD_E);
	_delay_ms(2);
}

void lcdData(uint8_t data) {
	PORTB = (data & 0xF0) | (1 << LCD_E) | (1 << LCD_RS);
 114:	98 2f       	mov	r25, r24
 116:	90 7f       	andi	r25, 0xF0	; 240
 118:	93 60       	ori	r25, 0x03	; 3
 11a:	95 b9       	out	0x05, r25	; 5
	PORTB &= ~(1 << LCD_E);
 11c:	29 98       	cbi	0x05, 1	; 5
 11e:	e3 ef       	ldi	r30, 0xF3	; 243
 120:	f1 e0       	ldi	r31, 0x01	; 1
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcdData+0xe>
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcdData+0x14>
 128:	00 00       	nop
	_delay_ms(2);
	
	PORTB = ((data << 4) & 0xF0) | (1 << LCD_E) | (1 << LCD_RS);
 12a:	f0 e1       	ldi	r31, 0x10	; 16
 12c:	8f 9f       	mul	r24, r31
 12e:	c0 01       	movw	r24, r0
 130:	11 24       	eor	r1, r1
 132:	83 60       	ori	r24, 0x03	; 3
 134:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << LCD_E);
 136:	29 98       	cbi	0x05, 1	; 5
 138:	83 ef       	ldi	r24, 0xF3	; 243
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcdData+0x28>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcdData+0x2e>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <lcdPrint>:
	_delay_ms(2);
}

void lcdPrint(const char* str) {
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
	lcdCommand(0x01); // Clear display
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcdCommand>
	while (*str) {
 152:	88 81       	ld	r24, Y
 154:	88 23       	and	r24, r24
 156:	31 f0       	breq	.+12     	; 0x164 <lcdPrint+0x1e>
 158:	21 96       	adiw	r28, 0x01	; 1
		lcdData(*str++);
 15a:	0e 94 8a 00 	call	0x114	; 0x114 <lcdData>
	_delay_ms(2);
}

void lcdPrint(const char* str) {
	lcdCommand(0x01); // Clear display
	while (*str) {
 15e:	89 91       	ld	r24, Y+
 160:	81 11       	cpse	r24, r1
 162:	fb cf       	rjmp	.-10     	; 0x15a <lcdPrint+0x14>
		lcdData(*str++);
	}
}
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <readKeypad>:

int readKeypad() {
	for (int row = 0; row < 4; row++) {
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
		PORTD = ~(1 << row); // Set row low
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	ca 01       	movw	r24, r20
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <readKeypad+0x12>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <readKeypad+0xe>
 180:	80 95       	com	r24
 182:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	00 c0       	rjmp	.+0      	; 0x186 <readKeypad+0x1c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <readKeypad+0x1e>
 188:	00 00       	nop
		_delay_us(5); // Wait for signal stabilization

		for (int col = 0; col < 3; col++) {
			if (!(PIND & (1 << (col + 4)))) {
 18a:	4c 9b       	sbis	0x09, 4	; 9
 18c:	1f c0       	rjmp	.+62     	; 0x1cc <readKeypad+0x62>
 18e:	4d 9b       	sbis	0x09, 5	; 9
 190:	03 c0       	rjmp	.+6      	; 0x198 <readKeypad+0x2e>
 192:	4e 99       	sbic	0x09, 6	; 9
 194:	0d c0       	rjmp	.+26     	; 0x1b0 <readKeypad+0x46>
 196:	20 c0       	rjmp	.+64     	; 0x1d8 <readKeypad+0x6e>
int readKeypad() {
	for (int row = 0; row < 4; row++) {
		PORTD = ~(1 << row); // Set row low
		_delay_us(5); // Wait for signal stabilization

		for (int col = 0; col < 3; col++) {
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
				// Return the key number based on row and column
				if (row == 3) {
					if (col == 0) return 11; // '*' key
					if (col == 2) return 12; // '#' key
				}
				return row * 3 + col + 1;
 19c:	a9 01       	movw	r20, r18
 19e:	44 0f       	add	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	24 0f       	add	r18, r20
 1a4:	35 1f       	adc	r19, r21
 1a6:	28 0f       	add	r18, r24
 1a8:	39 1f       	adc	r19, r25
 1aa:	c9 01       	movw	r24, r18
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	08 95       	ret
		lcdData(*str++);
	}
}

int readKeypad() {
	for (int row = 0; row < 4; row++) {
 1b0:	2f 5f       	subi	r18, 0xFF	; 255
 1b2:	3f 4f       	sbci	r19, 0xFF	; 255
 1b4:	24 30       	cpi	r18, 0x04	; 4
 1b6:	31 05       	cpc	r19, r1
 1b8:	e1 f6       	brne	.-72     	; 0x172 <readKeypad+0x8>
				}
				return row * 3 + col + 1;
			}
		}
	}
	return 0; // No key pressed
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	08 95       	ret

		for (int col = 0; col < 3; col++) {
			if (!(PIND & (1 << (col + 4)))) {
				// Return the key number based on row and column
				if (row == 3) {
					if (col == 0) return 11; // '*' key
 1c0:	8b e0       	ldi	r24, 0x0B	; 11
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret
					if (col == 2) return 12; // '#' key
 1c6:	8c e0       	ldi	r24, 0x0C	; 12
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	08 95       	ret
		_delay_us(5); // Wait for signal stabilization

		for (int col = 0; col < 3; col++) {
			if (!(PIND & (1 << (col + 4)))) {
				// Return the key number based on row and column
				if (row == 3) {
 1cc:	23 30       	cpi	r18, 0x03	; 3
 1ce:	31 05       	cpc	r19, r1
 1d0:	b9 f3       	breq	.-18     	; 0x1c0 <readKeypad+0x56>
int readKeypad() {
	for (int row = 0; row < 4; row++) {
		PORTD = ~(1 << row); // Set row low
		_delay_us(5); // Wait for signal stabilization

		for (int col = 0; col < 3; col++) {
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	e2 cf       	rjmp	.-60     	; 0x19c <readKeypad+0x32>
			if (!(PIND & (1 << (col + 4)))) {
				// Return the key number based on row and column
				if (row == 3) {
 1d8:	23 30       	cpi	r18, 0x03	; 3
 1da:	31 05       	cpc	r19, r1
 1dc:	a1 f3       	breq	.-24     	; 0x1c6 <readKeypad+0x5c>
int readKeypad() {
	for (int row = 0; row < 4; row++) {
		PORTD = ~(1 << row); // Set row low
		_delay_us(5); // Wait for signal stabilization

		for (int col = 0; col < 3; col++) {
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	dc cf       	rjmp	.-72     	; 0x19c <readKeypad+0x32>

000001e4 <servoMove>:

void servoMove(int angle) {
	// Generate PWM signal for the servo
	// Assumes a servo that operates with 1ms to 2ms pulse width for 0 to 180 degrees
	// You will need to adjust based on your specific servo specifications
	int pulseWidth = 1000 + (angle * 1000 / 180); // Calculate pulse width
 1e4:	28 ee       	ldi	r18, 0xE8	; 232
 1e6:	33 e0       	ldi	r19, 0x03	; 3
 1e8:	ac 01       	movw	r20, r24
 1ea:	42 9f       	mul	r20, r18
 1ec:	c0 01       	movw	r24, r0
 1ee:	43 9f       	mul	r20, r19
 1f0:	90 0d       	add	r25, r0
 1f2:	52 9f       	mul	r21, r18
 1f4:	90 0d       	add	r25, r0
 1f6:	11 24       	eor	r1, r1
 1f8:	64 eb       	ldi	r22, 0xB4	; 180
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	0e 94 c3 01 	call	0x386	; 0x386 <__divmodhi4>
 200:	9b 01       	movw	r18, r22
 202:	28 51       	subi	r18, 0x18	; 24
 204:	3c 4f       	sbci	r19, 0xFC	; 252
 206:	62 e3       	ldi	r22, 0x32	; 50
 208:	70 e0       	ldi	r23, 0x00	; 0
	for (int i = 0; i < 50; i++) {
		PORTB |= (1 << SERVO_PORT);
		for (int j = 0; j < pulseWidth; j++) _delay_us(1); // Busy wait
		PORTB &= ~(1 << SERVO_PORT);
		for (int j = 0; j < (20000 - pulseWidth); j++) _delay_us(1); // Busy wait
 20a:	40 e2       	ldi	r20, 0x20	; 32
 20c:	5e e4       	ldi	r21, 0x4E	; 78
 20e:	42 1b       	sub	r20, r18
 210:	53 0b       	sbc	r21, r19
	// Generate PWM signal for the servo
	// Assumes a servo that operates with 1ms to 2ms pulse width for 0 to 180 degrees
	// You will need to adjust based on your specific servo specifications
	int pulseWidth = 1000 + (angle * 1000 / 180); // Calculate pulse width
	for (int i = 0; i < 50; i++) {
		PORTB |= (1 << SERVO_PORT);
 212:	2e 9a       	sbi	0x05, 6	; 5
		for (int j = 0; j < pulseWidth; j++) _delay_us(1); // Busy wait
 214:	12 16       	cp	r1, r18
 216:	13 06       	cpc	r1, r19
 218:	3c f4       	brge	.+14     	; 0x228 <servoMove+0x44>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	00 00       	nop
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	82 17       	cp	r24, r18
 224:	93 07       	cpc	r25, r19
 226:	dc f3       	brlt	.-10     	; 0x21e <servoMove+0x3a>
		PORTB &= ~(1 << SERVO_PORT);
 228:	2e 98       	cbi	0x05, 6	; 5
		for (int j = 0; j < (20000 - pulseWidth); j++) _delay_us(1); // Busy wait
 22a:	14 16       	cp	r1, r20
 22c:	15 06       	cpc	r1, r21
 22e:	3c f4       	brge	.+14     	; 0x23e <servoMove+0x5a>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	00 00       	nop
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	84 17       	cp	r24, r20
 23a:	95 07       	cpc	r25, r21
 23c:	d9 f7       	brne	.-10     	; 0x234 <servoMove+0x50>
 23e:	61 50       	subi	r22, 0x01	; 1
 240:	71 09       	sbc	r23, r1
void servoMove(int angle) {
	// Generate PWM signal for the servo
	// Assumes a servo that operates with 1ms to 2ms pulse width for 0 to 180 degrees
	// You will need to adjust based on your specific servo specifications
	int pulseWidth = 1000 + (angle * 1000 / 180); // Calculate pulse width
	for (int i = 0; i < 50; i++) {
 242:	39 f7       	brne	.-50     	; 0x212 <servoMove+0x2e>
		PORTB |= (1 << SERVO_PORT);
		for (int j = 0; j < pulseWidth; j++) _delay_us(1); // Busy wait
		PORTB &= ~(1 << SERVO_PORT);
		for (int j = 0; j < (20000 - pulseWidth); j++) _delay_us(1); // Busy wait
	}
}
 244:	08 95       	ret

00000246 <buzzerAlert>:

void buzzerAlert() {
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	90 e0       	ldi	r25, 0x00	; 0
	for (int i = 0; i < 3; i++) {
		PORTB |= (1 << BUZZER_PORT);
 24a:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	e7 ea       	ldi	r30, 0xA7	; 167
 24e:	f1 e6       	ldi	r31, 0x61	; 97
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <buzzerAlert+0xa>
 254:	00 c0       	rjmp	.+0      	; 0x256 <buzzerAlert+0x10>
 256:	00 00       	nop
		_delay_ms(100);
		PORTB &= ~(1 << BUZZER_PORT);
 258:	2f 98       	cbi	0x05, 7	; 5
 25a:	e7 ea       	ldi	r30, 0xA7	; 167
 25c:	f1 e6       	ldi	r31, 0x61	; 97
 25e:	31 97       	sbiw	r30, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <buzzerAlert+0x18>
 262:	00 c0       	rjmp	.+0      	; 0x264 <buzzerAlert+0x1e>
 264:	00 00       	nop
 266:	01 97       	sbiw	r24, 0x01	; 1
		for (int j = 0; j < (20000 - pulseWidth); j++) _delay_us(1); // Busy wait
	}
}

void buzzerAlert() {
	for (int i = 0; i < 3; i++) {
 268:	81 f7       	brne	.-32     	; 0x24a <buzzerAlert+0x4>
		PORTB |= (1 << BUZZER_PORT);
		_delay_ms(100);
		PORTB &= ~(1 << BUZZER_PORT);
		_delay_ms(100);
	}
}
 26a:	08 95       	ret

0000026c <main>:
char input[5];
int inputIndex = 0;

int main() {
	// Initialize ports
	DDRB = 0xFF;  // Set PORTB as output
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x0F;  // Set PD0 to PD3 as output (rows), PD4 to PD6 as input (columns)
 270:	8f e0       	ldi	r24, 0x0F	; 15
 272:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xF0; // Enable pull-up resistors for PD4 to PD6
 274:	80 ef       	ldi	r24, 0xF0	; 240
 276:	8b b9       	out	0x0b, r24	; 11

	// Initialize the LCD
	initLCD();
 278:	0e 94 6e 00 	call	0xdc	; 0xdc <initLCD>

	// Set the initial lock status (locked)
	lcdPrint("LOCKED");
 27c:	88 e0       	ldi	r24, 0x08	; 8
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	0e 94 a3 00 	call	0x146	; 0x146 <lcdPrint>

	// Initialize the servo (setting to default position)
	servoMove(0);
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <servoMove>
					buzzerAlert();
					_delay_ms(500);
					lcdPrint("LOCKED");
				}
				inputIndex = 0;
				memset(input, 0, sizeof(input));
 28c:	c5 e0       	ldi	r28, 0x05	; 5
	// Initialize the servo (setting to default position)
	servoMove(0);

	while (1) {
		// Read input from the keypad
		int key = readKeypad();
 28e:	0e 94 b5 00 	call	0x16a	; 0x16a <readKeypad>

		if (key != 0) { // If a key is pressed
 292:	00 97       	sbiw	r24, 0x00	; 0
 294:	09 f4       	brne	.+2      	; 0x298 <main+0x2c>
 296:	70 c0       	rjmp	.+224    	; 0x378 <main+0x10c>
			if (key == 11) { // '*' key for reset
 298:	8b 30       	cpi	r24, 0x0B	; 11
 29a:	91 05       	cpc	r25, r1
 29c:	e9 f4       	brne	.+58     	; 0x2d8 <main+0x6c>
				inputIndex = 0;
 29e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
 2a2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
				memset(input, 0, sizeof(input));
 2a6:	ec e1       	ldi	r30, 0x1C	; 28
 2a8:	f1 e0       	ldi	r31, 0x01	; 1
 2aa:	df 01       	movw	r26, r30
 2ac:	2c 2f       	mov	r18, r28
 2ae:	1d 92       	st	X+, r1
 2b0:	2a 95       	dec	r18
 2b2:	e9 f7       	brne	.-6      	; 0x2ae <main+0x42>
				lcdPrint("RESET");
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	0e 94 a3 00 	call	0x146	; 0x146 <lcdPrint>
 2bc:	8f e9       	ldi	r24, 0x9F	; 159
 2be:	96 e8       	ldi	r25, 0x86	; 134
 2c0:	a1 e0       	ldi	r26, 0x01	; 1
 2c2:	81 50       	subi	r24, 0x01	; 1
 2c4:	90 40       	sbci	r25, 0x00	; 0
 2c6:	a0 40       	sbci	r26, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <main+0x56>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <main+0x60>
 2cc:	00 00       	nop
				_delay_ms(500);
				lcdPrint("LOCKED");
 2ce:	88 e0       	ldi	r24, 0x08	; 8
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	0e 94 a3 00 	call	0x146	; 0x146 <lcdPrint>
 2d6:	50 c0       	rjmp	.+160    	; 0x378 <main+0x10c>
				} else if (key == 12) { // '#' key for enter
 2d8:	8c 30       	cpi	r24, 0x0C	; 12
 2da:	91 05       	cpc	r25, r1
 2dc:	b9 f5       	brne	.+110    	; 0x34c <main+0xe0>
				input[inputIndex] = '\0'; // Null-terminate the input string
 2de:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__data_end>
 2e2:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__data_end+0x1>
 2e6:	e4 5e       	subi	r30, 0xE4	; 228
 2e8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ea:	10 82       	st	Z, r1
				if (strcmp(input, passcode) == 0) {
 2ec:	65 e1       	ldi	r22, 0x15	; 21
 2ee:	71 e0       	ldi	r23, 0x01	; 1
 2f0:	8c e1       	ldi	r24, 0x1C	; 28
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <strcmp>
 2f8:	89 2b       	or	r24, r25
 2fa:	49 f4       	brne	.+18     	; 0x30e <main+0xa2>
					lcdPrint("UNLOCKED");
 2fc:	86 e0       	ldi	r24, 0x06	; 6
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 a3 00 	call	0x146	; 0x146 <lcdPrint>
					servoMove(90);
 304:	8a e5       	ldi	r24, 0x5A	; 90
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <servoMove>
 30c:	13 c0       	rjmp	.+38     	; 0x334 <main+0xc8>
					} else {
					lcdPrint("WRONG");
 30e:	8f e0       	ldi	r24, 0x0F	; 15
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 a3 00 	call	0x146	; 0x146 <lcdPrint>
					buzzerAlert();
 316:	0e 94 23 01 	call	0x246	; 0x246 <buzzerAlert>
 31a:	bf e9       	ldi	r27, 0x9F	; 159
 31c:	26 e8       	ldi	r18, 0x86	; 134
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	b1 50       	subi	r27, 0x01	; 1
 322:	20 40       	sbci	r18, 0x00	; 0
 324:	80 40       	sbci	r24, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <main+0xb4>
 328:	00 c0       	rjmp	.+0      	; 0x32a <main+0xbe>
 32a:	00 00       	nop
					_delay_ms(500);
					lcdPrint("LOCKED");
 32c:	88 e0       	ldi	r24, 0x08	; 8
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 a3 00 	call	0x146	; 0x146 <lcdPrint>
				}
				inputIndex = 0;
 334:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__data_end+0x1>
 338:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
				memset(input, 0, sizeof(input));
 33c:	ec e1       	ldi	r30, 0x1C	; 28
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	df 01       	movw	r26, r30
 342:	2c 2f       	mov	r18, r28
 344:	1d 92       	st	X+, r1
 346:	2a 95       	dec	r18
 348:	e9 f7       	brne	.-6      	; 0x344 <main+0xd8>
 34a:	16 c0       	rjmp	.+44     	; 0x378 <main+0x10c>
				} else {
				if (inputIndex < 4) { // Only accept up to 4 digits
 34c:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__data_end>
 350:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__data_end+0x1>
 354:	24 30       	cpi	r18, 0x04	; 4
 356:	31 05       	cpc	r19, r1
 358:	7c f4       	brge	.+30     	; 0x378 <main+0x10c>
					input[inputIndex++] = '0' + key;
 35a:	a9 01       	movw	r20, r18
 35c:	4f 5f       	subi	r20, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	50 93 1b 01 	sts	0x011B, r21	; 0x80011b <__data_end+0x1>
 364:	40 93 1a 01 	sts	0x011A, r20	; 0x80011a <__data_end>
 368:	f9 01       	movw	r30, r18
 36a:	e4 5e       	subi	r30, 0xE4	; 228
 36c:	fe 4f       	sbci	r31, 0xFE	; 254
 36e:	80 5d       	subi	r24, 0xD0	; 208
 370:	80 83       	st	Z, r24
					lcdData('*'); // Display '*' for each digit entered
 372:	8a e2       	ldi	r24, 0x2A	; 42
 374:	0e 94 8a 00 	call	0x114	; 0x114 <lcdData>
 378:	8f e4       	ldi	r24, 0x4F	; 79
 37a:	93 ec       	ldi	r25, 0xC3	; 195
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <main+0x110>
 380:	00 c0       	rjmp	.+0      	; 0x382 <main+0x116>
 382:	00 00       	nop
 384:	84 cf       	rjmp	.-248    	; 0x28e <main+0x22>

00000386 <__divmodhi4>:
 386:	97 fb       	bst	r25, 7
 388:	07 2e       	mov	r0, r23
 38a:	16 f4       	brtc	.+4      	; 0x390 <__divmodhi4+0xa>
 38c:	00 94       	com	r0
 38e:	07 d0       	rcall	.+14     	; 0x39e <__divmodhi4_neg1>
 390:	77 fd       	sbrc	r23, 7
 392:	09 d0       	rcall	.+18     	; 0x3a6 <__divmodhi4_neg2>
 394:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__udivmodhi4>
 398:	07 fc       	sbrc	r0, 7
 39a:	05 d0       	rcall	.+10     	; 0x3a6 <__divmodhi4_neg2>
 39c:	3e f4       	brtc	.+14     	; 0x3ac <__divmodhi4_exit>

0000039e <__divmodhi4_neg1>:
 39e:	90 95       	com	r25
 3a0:	81 95       	neg	r24
 3a2:	9f 4f       	sbci	r25, 0xFF	; 255
 3a4:	08 95       	ret

000003a6 <__divmodhi4_neg2>:
 3a6:	70 95       	com	r23
 3a8:	61 95       	neg	r22
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255

000003ac <__divmodhi4_exit>:
 3ac:	08 95       	ret

000003ae <__udivmodhi4>:
 3ae:	aa 1b       	sub	r26, r26
 3b0:	bb 1b       	sub	r27, r27
 3b2:	51 e1       	ldi	r21, 0x11	; 17
 3b4:	07 c0       	rjmp	.+14     	; 0x3c4 <__udivmodhi4_ep>

000003b6 <__udivmodhi4_loop>:
 3b6:	aa 1f       	adc	r26, r26
 3b8:	bb 1f       	adc	r27, r27
 3ba:	a6 17       	cp	r26, r22
 3bc:	b7 07       	cpc	r27, r23
 3be:	10 f0       	brcs	.+4      	; 0x3c4 <__udivmodhi4_ep>
 3c0:	a6 1b       	sub	r26, r22
 3c2:	b7 0b       	sbc	r27, r23

000003c4 <__udivmodhi4_ep>:
 3c4:	88 1f       	adc	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	5a 95       	dec	r21
 3ca:	a9 f7       	brne	.-22     	; 0x3b6 <__udivmodhi4_loop>
 3cc:	80 95       	com	r24
 3ce:	90 95       	com	r25
 3d0:	bc 01       	movw	r22, r24
 3d2:	cd 01       	movw	r24, r26
 3d4:	08 95       	ret

000003d6 <strcmp>:
 3d6:	fb 01       	movw	r30, r22
 3d8:	dc 01       	movw	r26, r24
 3da:	8d 91       	ld	r24, X+
 3dc:	01 90       	ld	r0, Z+
 3de:	80 19       	sub	r24, r0
 3e0:	01 10       	cpse	r0, r1
 3e2:	d9 f3       	breq	.-10     	; 0x3da <strcmp+0x4>
 3e4:	99 0b       	sbc	r25, r25
 3e6:	08 95       	ret

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>
